<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Employee;
use App\Models\EmployeeSalary;
use App\Models\PayrollRecord;
use App\Models\SalaryAdjustment;
use Carbon\Carbon;

class PayrollSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Check if payroll data already exists
        if (PayrollRecord::count() > 0) {
            $this->command->info('Payroll data already exists. Skipping payroll seeding.');
            return;
        }

        $employees = Employee::with('salaries')->get();

        if ($employees->isEmpty()) {
            $this->command->warn('No employees found. Please run EmployeeSeeder first.');
            return;
        }

        // Generate payroll records for the last 3 months
        $months = [
            Carbon::now()->subMonths(2)->startOfMonth(),
            Carbon::now()->subMonth()->startOfMonth(),
            Carbon::now()->startOfMonth(),
        ];

        foreach ($months as $month) {
            $payPeriodStart = $month->copy();
            $payPeriodEnd = $month->copy()->endOfMonth();
            $payDate = $payPeriodEnd->copy()->addDays(3);

            foreach ($employees as $employee) {
                $salary = $employee->salaries()->where('effective_date', '<=', $payPeriodStart)->latest('effective_date')->first();
                
                if (!$salary) {
                    continue;
                }

                // Calculate basic pay for the month
                $basicPay = $this->calculateBasicPay($salary, $payPeriodStart, $payPeriodEnd);
                
                // Random overtime hours (0-20 hours)
                $overtimeHours = rand(0, 20);
                $overtimePay = $overtimeHours * ($salary->hourly_rate ?? 25) * 1.5;

                // Random bonuses (0-500)
                $bonuses = rand(0, 500);

                // Calculate gross pay
                $grossPay = $basicPay + $overtimePay + $salary->allowances + $bonuses;

                // Calculate deductions
                $taxDeductions = $grossPay * 0.15; // 15% tax
                $insuranceDeductions = 200; // Fixed insurance
                $totalDeductions = $taxDeductions + $insuranceDeductions;

                // Calculate net pay
                $netPay = $grossPay - $totalDeductions;

                // Create payroll record
                PayrollRecord::firstOrCreate([
                    'employee_id' => $employee->id,
                    'pay_period_start' => $payPeriodStart,
                    'pay_period_end' => $payPeriodEnd,
                ], [
                    'payroll_number' => $this->generatePayrollNumber($month, $employee->id),
                    'employee_salary_id' => $salary->id,
                    'pay_date' => $payDate,
                    'basic_pay' => $basicPay,
                    'overtime_hours' => $overtimeHours,
                    'overtime_pay' => $overtimePay,
                    'allowances' => $salary->allowances,
                    'bonuses' => $bonuses,
                    'commissions' => 0,
                    'gross_pay' => $grossPay,
                    'tax_deductions' => $taxDeductions,
                    'insurance_deductions' => $insuranceDeductions,
                    'other_deductions' => 0,
                    'total_deductions' => $totalDeductions,
                    'net_pay' => $netPay,
                    'status' => $month->isBefore(Carbon::now()->startOfMonth()) ? 'paid' : 'approved',
                    'payment_method' => 'bank_transfer',
                    'created_by' => 1,
                    'approved_by' => 1,
                    'approved_at' => $payDate->copy()->subDays(2),
                    'paid_by' => $month->isBefore(Carbon::now()->startOfMonth()) ? 1 : null,
                    'paid_at' => $month->isBefore(Carbon::now()->startOfMonth()) ? $payDate : null,
                    'notes' => 'Generated by seeder',
                ]);
            }
        }

        // Create some salary adjustments
        $this->createSalaryAdjustments();

        $this->command->info('Payroll records and salary adjustments seeded successfully!');
    }

    /**
     * Calculate basic pay for the period
     */
    private function calculateBasicPay(EmployeeSalary $salary, Carbon $start, Carbon $end): float
    {
        $days = $start->diffInDays($end) + 1;

        return match($salary->salary_type) {
            'monthly' => ($salary->basic_salary / 30) * $days,
            'daily' => $salary->basic_salary * $days,
            'hourly' => ($salary->hourly_rate ?? 25) * 8 * $days, // 8 hours per day
            default => $salary->basic_salary
        };
    }

    /**
     * Generate payroll number
     */
    private function generatePayrollNumber(Carbon $month, int $employeeId): string
    {
        $prefix = 'PAY';
        $year = $month->year;
        $monthNum = $month->format('m');

        // Use employee ID and timestamp to ensure uniqueness
        $sequence = $employeeId . time() % 10000;

        return sprintf('%s%s%s%04d', $prefix, $year, $monthNum, $sequence);
    }

    /**
     * Create sample salary adjustments
     */
    private function createSalaryAdjustments(): void
    {
        $employees = Employee::with('salaries')->limit(3)->get();

        foreach ($employees as $employee) {
            $currentSalary = $employee->salaries()->where('status', 'active')->first();
            
            if (!$currentSalary) {
                continue;
            }

            // Create a salary increase adjustment
            $newBasicSalary = $currentSalary->basic_salary * 1.1; // 10% increase
            
            $newSalary = EmployeeSalary::create([
                'employee_id' => $employee->id,
                'basic_salary' => $newBasicSalary,
                'salary_type' => $currentSalary->salary_type,
                'hourly_rate' => $currentSalary->hourly_rate ? $currentSalary->hourly_rate * 1.1 : null,
                'overtime_rate' => $currentSalary->overtime_rate ? $currentSalary->overtime_rate * 1.1 : null,
                'allowances' => $currentSalary->allowances,
                'deductions' => $currentSalary->deductions,
                'gross_salary' => $newBasicSalary + $currentSalary->allowances,
                'net_salary' => $newBasicSalary + $currentSalary->allowances - $currentSalary->deductions,
                'effective_date' => Carbon::now()->addMonth()->startOfMonth(),
                'status' => 'inactive',
                'created_by' => 1,
                'notes' => 'Annual salary review increase',
            ]);

            // Create salary adjustment record
            SalaryAdjustment::create([
                'adjustment_number' => $this->generateAdjustmentNumber(),
                'employee_id' => $employee->id,
                'old_salary_id' => $currentSalary->id,
                'new_salary_id' => $newSalary->id,
                'adjustment_type' => 'increment',
                'old_amount' => $currentSalary->basic_salary,
                'new_amount' => $newBasicSalary,
                'adjustment_amount' => $newBasicSalary - $currentSalary->basic_salary,
                'percentage_change' => 10.0,
                'effective_date' => Carbon::now()->addMonth()->startOfMonth(),
                'reason' => 'Annual performance review - salary increase',
                'status' => 'approved',
                'requested_by' => 1,
                'approved_by' => 1,
                'approved_at' => now(),
                'approval_notes' => 'Approved based on excellent performance',
                'notes' => 'Generated by seeder',
            ]);
        }
    }

    /**
     * Generate adjustment number
     */
    private function generateAdjustmentNumber(): string
    {
        $prefix = 'ADJ';
        $year = Carbon::now()->year;

        $lastAdjustment = SalaryAdjustment::whereYear('created_at', $year)
                                        ->orderBy('id', 'desc')
                                        ->first();

        $sequence = $lastAdjustment ? (int) substr($lastAdjustment->adjustment_number, -4) + 1 : 1;

        return sprintf('%s%s%04d', $prefix, $year, $sequence);
    }
}
