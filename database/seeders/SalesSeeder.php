<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Sale;
use App\Models\SaleItem;
use App\Models\Customer;
use App\Models\Product;
use App\Models\User;
use Carbon\Carbon;

class SalesSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Check if sales data already exists
        if (Sale::count() > 0) {
            $this->command->info('Sales data already exists. Skipping sales seeding.');
            return;
        }

        $customers = Customer::where('name', '!=', 'Walk-in Customer')->get();
        $products = Product::where('is_active', true)->get();
        $users = User::all();

        if ($customers->isEmpty() || $products->isEmpty() || $users->isEmpty()) {
            $this->command->warn('Missing required data. Please run CustomerSeeder, ProductSeeder, and ensure users exist.');
            return;
        }

        // Generate sales for the last 6 months
        $startDate = Carbon::now()->subMonths(6);
        $endDate = Carbon::now();

        $saleNumber = 1;

        // Generate 50-100 sales
        for ($i = 0; $i < rand(50, 100); $i++) {
            $customer = $customers->random();
            $user = $users->random();
            $saleDate = Carbon::createFromTimestamp(rand($startDate->timestamp, $endDate->timestamp));

            // Random number of items (1-5, but not more than available products)
            $itemCount = rand(1, min(5, $products->count()));
            $selectedProducts = $products->random($itemCount);

            $subtotal = 0;
            $totalQuantity = 0;

            // Calculate subtotal and quantity
            foreach ($selectedProducts as $product) {
                $quantity = rand(1, 3);
                $unitPrice = $product->selling_price;
                $lineTotal = $quantity * $unitPrice;
                
                $subtotal += $lineTotal;
                $totalQuantity += $quantity;
            }

            // Calculate tax (8% tax rate)
            $taxAmount = $subtotal * 0.08;
            $totalAmount = $subtotal + $taxAmount;

            // Random payment status (80% paid, 20% pending)
            $isPaid = rand(1, 100) <= 80;
            $paidAmount = $isPaid ? $totalAmount : ($totalAmount * rand(0, 50) / 100); // Partial payments for some

            // Create sale
            $sale = Sale::create([
                'sale_number' => 'SALE-' . str_pad($saleNumber++, 6, '0', STR_PAD_LEFT),
                'customer_id' => $customer->id,
                'user_id' => $user->id,
                'sale_date' => $saleDate,
                'subtotal' => $subtotal,
                'tax_amount' => $taxAmount,
                'discount_amount' => 0,
                'total_amount' => $totalAmount,
                'paid_amount' => $paidAmount,
                'payment_method' => $this->getRandomPaymentMethod(),
                'status' => $isPaid ? 'completed' : 'pending',
                'notes' => 'Generated by seeder',
            ]);

            // Create sale items
            foreach ($selectedProducts as $product) {
                $quantity = rand(1, 3);
                $unitPrice = $product->selling_price;
                $lineTotal = $quantity * $unitPrice;

                SaleItem::create([
                    'sale_id' => $sale->id,
                    'product_id' => $product->id,
                    'quantity' => $quantity,
                    'unit_price' => $unitPrice,
                    'total_amount' => $lineTotal,
                ]);

                // Update product stock
                $product->decrement('stock_quantity', $quantity);
            }

            // Update customer total purchases
            $customer->increment('total_purchases', $totalAmount);
            
            // Add loyalty points (1 point per dollar)
            $customer->increment('loyalty_points', floor($totalAmount));
        }

        // Generate some purchase orders for suppliers
        $this->generatePurchaseOrders();

        $this->command->info('Sales and purchase orders seeded successfully!');
    }

    /**
     * Get random payment method
     */
    private function getRandomPaymentMethod(): string
    {
        $methods = ['cash', 'card', 'bank_transfer', 'mobile_payment'];
        return $methods[array_rand($methods)];
    }

    /**
     * Generate sample purchase orders
     */
    private function generatePurchaseOrders(): void
    {
        $suppliers = \App\Models\Supplier::where('is_active', true)->get();
        $products = Product::where('is_active', true)->get();
        $users = User::all();

        if ($suppliers->isEmpty() || $products->isEmpty()) {
            return;
        }

        // Generate 10-20 purchase orders
        for ($i = 0; $i < rand(10, 20); $i++) {
            $supplier = $suppliers->random();
            $user = $users->random();
            $orderDate = Carbon::now()->subDays(rand(1, 180));

            // Random number of items (1-8, but not more than available products)
            $itemCount = rand(1, min(8, $products->count()));
            $selectedProducts = $products->random($itemCount);

            $subtotal = 0;
            $totalQuantity = 0;

            // Calculate subtotal and quantity
            foreach ($selectedProducts as $product) {
                $quantity = rand(10, 100); // Larger quantities for purchase orders
                $unitPrice = $product->cost_price ?? ($product->selling_price * 0.7); // 70% of selling price
                $lineTotal = $quantity * $unitPrice;
                
                $subtotal += $lineTotal;
                $totalQuantity += $quantity;
            }

            // Calculate tax (8% tax rate)
            $taxAmount = $subtotal * 0.08;
            $totalAmount = $subtotal + $taxAmount;

            // Random status (70% received, 30% confirmed)
            $status = rand(1, 100) <= 70 ? 'received' : 'confirmed';

            // Create purchase order
            $purchaseOrder = \App\Models\PurchaseOrder::create([
                'po_number' => 'PO-' . str_pad($i + 1, 6, '0', STR_PAD_LEFT),
                'supplier_id' => $supplier->id,
                'user_id' => $user->id,
                'order_date' => $orderDate,
                'expected_delivery_date' => $orderDate->copy()->addDays(rand(7, 30)),
                'actual_delivery_date' => $status === 'received' ? $orderDate->copy()->addDays(rand(5, 25)) : null,
                'subtotal' => $subtotal,
                'tax_amount' => $taxAmount,
                'total_amount' => $totalAmount,
                'status' => $status,
                'notes' => 'Generated by seeder',
            ]);

            // Create purchase order items
            foreach ($selectedProducts as $product) {
                $quantity = rand(10, 100);
                $unitPrice = $product->cost_price ?? ($product->selling_price * 0.7);
                $lineTotal = $quantity * $unitPrice;

                \App\Models\PurchaseOrderItem::create([
                    'purchase_order_id' => $purchaseOrder->id,
                    'product_id' => $product->id,
                    'quantity_ordered' => $quantity,
                    'quantity_received' => $status === 'received' ? $quantity : 0,
                    'unit_cost' => $unitPrice,
                    'total_cost' => $lineTotal,
                ]);

                // Update product stock if received
                if ($status === 'received') {
                    $product->increment('stock_quantity', $quantity);
                    
                    // Update cost price
                    $product->update(['cost_price' => $unitPrice]);
                }
            }
        }
    }
}
